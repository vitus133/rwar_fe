#:import NoTransition kivy.uix.screenmanager.NoTransition
#:import Window kivy.core.window.Window
#:import IconLeftWidget kivymd.uix.list.IconLeftWidget
#:import toast kivymd.toast.toast


<ItemBackdropFrontLayer@TwoLineAvatarListItem>
    icon: "android"

    IconLeftWidget:
        icon: root.icon


<BackLayerTextItem>
    size_hint_y: None
    height: "80dp"
    text: ""
    iden: ""


    IconLeftWidget:
        icon: root.icon
        theme_text_color: "Custom"
        text_color: root.theme_cls.opposite_text_color

    MDTextField:
        text: root.text
        # max_text_length: 
        hint_text: root.hint_text
        # helper_text: "Helper text"
        # helper_text_mode: "persistent"
        color_mode: "custom"
        line_color_focus: root.theme_cls.opposite_text_color
        hint_text_color: root.theme_cls.opposite_text_color
        helper_text_color: root.theme_cls.opposite_text_color
        foreground_color: app.theme_cls.opposite_text_color
        multiline: True
        # on_text: print(root.iden, self.text)
        on_text: app.store_kv(root.iden, self.text)


<CheckboxBackdrop@BoxLayout>
    size_hint_y: None
    height: "40dp"
    spacing: "25dp"
    text: ""

    MDCheckbox:
        size_hint: None, None
        size: "30dp", "30dp"
        active: False or self.active
        pos_hint: {"center_y": .5}
        selected_color: 1, 1, 1, 1

    MDLabel:
        text: root.text
        color: 1, 1, 1, .7


<RadioButtonBackdrop@BoxLayout>
    size_hint_y: None
    height: "40dp"
    spacing: "25dp"
    padding: "9dp"
    text: ""
    iden: ""
    group: ""
    active: False

    MDCheckbox:
        id: root.id
        group: root.group
        size_hint: None, None
        size: "30dp", "30dp"
        pos_hint: {"center_y": .5}
        selected_color: 1, 1, 1, 1
        # on_state: print(root.iden, root.text, self.state, root.group)
        on_state: app.store_group(root.group, root.iden, self.state)
        active: root.active

    MDLabel:
        text: root.text
        color: 1, 1, 1, .7


<FrontLayer@ScrollView>
    backdrop: None
    backlayer: None

    GridLayout:
        size_hint_y: None
        height: self.minimum_height
        cols: 1
        padding: "5dp"

        ItemBackdropFrontLayer:
            text: "DigitalOcean"
            secondary_text: "Configuration"
            icon: "digital-ocean"
            on_press:
                root.backlayer.current = "DigitalOcean screen"
                # root.backdrop.open(-Window.height / 2)
                root.backdrop.open()

        ItemBackdropFrontLayer:
            text: "DuckDns"
            secondary_text: "Configuration"
            icon: "duck"
            on_press:
                root.backlayer.current = "DuckDns screen"
                root.backdrop.open()
        # TODO: Add here a screen for user, pass and PSK configuration
        ItemBackdropFrontLayer:
            text: "VPN server"
            secondary_text: "Deploy now"
            icon: "transfer-up"
            on_press:
                progress_elements = [i.__class__.__name__ for i in root.ids.progress.children]
                spinner_idx = progress_elements.index('MDSpinner')
                icon_idx = progress_elements.index('IconLeftWidget')
                label_idx = progress_elements.index('MDLabel')
                spinner = root.ids.progress.children[spinner_idx]
                label = root.ids.progress.children[label_idx]
                icon = root.ids.progress.children[icon_idx]
                if not spinner.active: spinner.active = True; icon.icon = "creation"; label.text = "Deploying droplet..."
                else: spinner.active = False; icon.icon = ""; label.text = ""
#                root.backlayer.current = "DuckDns screen"
#                root.backdrop.open()

        BoxLayout:
            id: progress
            size_hint_y: None
            height: "80dp"
            spacing: "10dp"
            padding: "15dp"
            IconLeftWidget:
                icon: '' # "creation"
            MDSpinner:
                size_hint: None, None
                size: dp(20), dp(20)
                pos_hint: {'center_x': 0, 'center_y': .5}
                active: False
                color: self.theme_cls.text_color
            MDLabel:
                text: ""



<BackLayer@ScreenManager>
    transition: NoTransition()

    Screen:
        name: "DigitalOcean screen"

        ScrollView

            GridLayout:
                size_hint_y: None
                height: self.minimum_height
                cols: 1
                padding: "15dp"
                spacing: "10dp"

                MDLabel:
                    text: "DigitalOcean settings"
                    color: 1, 1, 1, 1
                Widget:
                Widget:
                MDLabel:
                    text: '[ref=https://m.do.co/c/5c155a477f8a/]No account? [u]Register here[/u][/ref]'
                    markup: True
                    on_ref_press:
                        import webbrowser
                        webbrowser.open(args[1])
                    color: 1, 1, 1, 1

                BackLayerTextItem:
                    icon: "key"
                    text: app.store.store_get('DigitalOcean API key') if app.store.store_exists('DigitalOcean API key') else ''
                    iden: "DigitalOcean API key"
                    hint_text: "API key"

                MDLabel:
                    text: "Automatic tear-down after "
                    color: 1, 1, 1, 1
                RadioButtonBackdrop:
                    iden: "rbOneHour"
                    text: "One hour"
                    group: "tear-down"
                    # active: True
                    active: app.store.store_exists(self.group) and app.store.get(self.group).get(self.iden) == "down"
                RadioButtonBackdrop:
                    iden: "rbFourHours"
                    text: "Four hours"
                    group: "tear-down"
                    active: app.store.store_exists(self.group) and app.store.get(self.group).get(self.iden) == "down"
                RadioButtonBackdrop:
                    iden: "rbOneDay"
                    text: "One day"
                    group: "tear-down"
                    active: app.store.store_exists(self.group) and app.store.get(self.group).get(self.iden) == "down"
                RadioButtonBackdrop:
                    iden: "rbNever"
                    text: "Never"
                    group: "tear-down"
                    active: app.store.store_exists(self.group) and app.store.get(self.group).get(self.iden) == "down"

    Screen:
        name: "DuckDns screen"

        ScrollView

            GridLayout:
                size_hint_y: None
                height: self.minimum_height
                cols: 1
                padding: "15dp"
                spacing: "10dp"

                MDLabel:
                    text: "DuckDns settings"
                    color: 1, 1, 1, 1
                Widget:
                Widget:
                MDLabel:
                    text: '[ref=https://www.duckdns.org/]No token or domain? [u]Create here[/u][/ref]'
                    markup: True
                    on_ref_press:
                        import webbrowser
                        webbrowser.open(args[1])
                    color: 1, 1, 1, 1

                BackLayerTextItem:
                    icon: "web"
                    text: app.store.store_get('DuckDns domain') if app.store.store_exists('DuckDns domain') else ''
                    iden: "DuckDns domain"
                    hint_text: self.iden
                BackLayerTextItem:
                    icon: "key"
                    text: app.store.store_get('DuckDns token') if app.store.store_exists('DuckDns token') else ''
                    iden: "DuckDns token"
                    hint_text: self.iden

                Widget:
                    size_hint_y: None
                    height: "10dp"


                MDSeparator:

                Widget:
                    size_hint_y: None
                    height: "15dp"

                MDLabel:
